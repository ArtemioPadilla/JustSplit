rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles - can be read by any authenticated user, but only modified by the owner
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        isValidUserData(request.resource.data);
      allow update: if request.auth != null && 
        request.auth.uid == userId &&
        isValidUserData(request.resource.data);
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Expenses - can be read and modified by participants only
    match /expenses/{expenseId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null && request.auth.uid in resource.data.participants;
      allow delete: if request.auth != null && request.auth.uid == resource.data.paidBy;
    }
    
    // Events - can be read and modified by members only
    match /events/{eventId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.members;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.members;
      allow update: if request.auth != null && request.auth.uid in resource.data.members;
      allow delete: if request.auth != null && request.auth.uid in resource.data.members;
    }
    
    // Settlements - can be read by both parties involved
    match /settlements/{settlementId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.fromUser || request.auth.uid == resource.data.toUser);
      allow create: if request.auth != null && 
        (request.auth.uid == request.resource.data.fromUser || request.auth.uid == request.resource.data.toUser);
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.fromUser || request.auth.uid == resource.data.toUser);
      allow delete: if false; // Don't allow deletion of settlement records
    }

    // Groups - Can be read by anybody in the Groups
    match /groups/{groupId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.members;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.members;
      allow update: if request.auth != null && request.auth.uid in resource.data.members;
      allow delete: if request.auth != null && request.auth.uid in resource.data.members;
    }
  }
  
  // Helper function to validate user data
  function isValidUserData(data) {
    return (!('avatarUrl' in data) || 
            data.avatarUrl == null || 
            (data.avatarUrl is string && data.avatarUrl.size() > 0));
  }
}